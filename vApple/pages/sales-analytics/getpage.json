{"docs":[{"system_page":0,"parent":null,"creation":"2012-09-21 20:15:12","module":"Selling","standard":"Yes","doctype":"Page","owner":"Administrator","icon":"fa fa-bar-chart","style":null,"modified_by":"Administrator","name":"sales-analytics","roles":[{"modified_by":"Administrator","name":null,"parent":"sales-analytics","creation":"2012-09-21 20:15:12","modified":"2017-06-09 23:51:51.372865","doctype":"Has Role","idx":1,"parenttype":"Page","role":"Analytics","owner":"Administrator","docstatus":0,"parentfield":"roles"},{"modified_by":"Administrator","name":null,"parent":"sales-analytics","creation":"2012-09-21 20:15:12","modified":"2017-06-09 23:51:51.372865","doctype":"Has Role","idx":2,"parenttype":"Page","role":"Sales Manager","owner":"Administrator","docstatus":0,"parentfield":"roles"},{"modified_by":"Administrator","name":null,"parent":"sales-analytics","creation":"2012-09-21 20:15:12","modified":"2017-06-09 23:51:51.372865","doctype":"Has Role","idx":3,"parenttype":"Page","role":"Maintenance Manager","owner":"Administrator","docstatus":0,"parentfield":"roles"}],"script":"// Copyright (c) 2015, Frappe Technologies Pvt. Ltd. and Contributors\n// License: GNU General Public License v3. See license.txt\n\nfrappe.pages['sales-analytics'].on_page_load = function(wrapper) {\n\tfrappe.ui.make_app_page({\n\t\tparent: wrapper,\n\t\ttitle: __('Sales Analytics'),\n\t\tsingle_column: true\n\t});\n\tnew erpnext.SalesAnalytics(wrapper);\n\n\n\tfrappe.breadcrumbs.add(\"Selling\")\n\n};\n\nerpnext.SalesAnalytics = frappe.views.TreeGridReport.extend({\n\tinit: function(wrapper) {\n\t\tthis._super({\n\t\t\ttitle: __(\"Sales Analytics\"),\n\t\t\tparent: $(wrapper).find('.layout-main'),\n\t\t\tpage: wrapper.page,\n\t\t\tdoctypes: [\"Item\", \"Item Group\", \"Customer\", \"Customer Group\", \"Company\", \"Territory\",\n\t\t\t\t\"Fiscal Year\", \"Sales Invoice\", \"Sales Invoice Item\",\n\t\t\t\t\"Sales Order\", \"Sales Order Item[Sales Analytics]\",\n\t\t\t\t\"Delivery Note\", \"Delivery Note Item[Sales Analytics]\"],\n\t\t\ttree_grid: { show: true }\n\t\t});\n\n\t\tthis.tree_grids = {\n\t\t\t\"Customer Group\": {\n\t\t\t\tlabel: __(\"Customer Group / Customer\"),\n\t\t\t\tshow: true,\n\t\t\t\titem_key: \"customer\",\n\t\t\t\tparent_field: \"parent_customer_group\",\n\t\t\t\tformatter: function(item) {\n\t\t\t\t\treturn item.customer_name? item.customer_name + \" (\" + item.name + \")\" : item.name; \n\t\t\t\t}\n\t\t\t},\n\t\t\t\"Customer\": {\n\t\t\t\tlabel: __(\"Customer\"),\n\t\t\t\tshow: false,\n\t\t\t\titem_key: \"customer\",\n\t\t\t\tformatter: function(item) {\n\t\t\t\t\treturn item.customer_name? item.customer_name + \" (\" + item.name + \")\" : item.name;\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"Item Group\": {\n\t\t\t\tlabel: __(\"Item\"),\n\t\t\t\tshow: true,\n\t\t\t\tparent_field: \"parent_item_group\",\n\t\t\t\titem_key: \"item_code\",\n\t\t\t\tformatter: function(item) {\n\t\t\t\t\treturn item.name;\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"Item\": {\n\t\t\t\tlabel: __(\"Item\"),\n\t\t\t\tshow: false,\n\t\t\t\titem_key: \"item_code\",\n\t\t\t\tformatter: function(item) {\n\t\t\t\t\treturn item.name;\n\t\t\t\t}\n\t\t\t},\n\t\t\t\"Territory\": {\n\t\t\t\tlabel: __(\"Territory / Customer\"),\n\t\t\t\tshow: true,\n\t\t\t\titem_key: \"customer\",\n\t\t\t\tparent_field: \"parent_territory\",\n\t\t\t\tformatter: function(item) {\n\t\t\t\t\treturn item.customer_name? item.customer_name + \" (\" + item.name + \")\" : item.name;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t},\n\tsetup_columns: function() {\n\t\tthis.tree_grid = this.tree_grids[this.tree_type];\n\n\t\tvar std_columns = [\n\t\t\t{id: \"check\", name: \"Plot\", field: \"check\", width: 30,\n\t\t\t\tformatter: this.check_formatter},\n\t\t\t{id: \"name\", name: this.tree_grid.label, field: \"name\", width: 300,\n\t\t\t\tformatter: this.tree_formatter},\n\t\t\t{id: \"total\", name: \"Total\", field: \"total\", plot: false,\n\t\t\t\tformatter: this.currency_formatter}\n\t\t];\n\n\t\tthis.make_date_range_columns();\n\t\tthis.columns = std_columns.concat(this.columns);\n\t},\n\tfilters: [\n\t\t{fieldtype:\"Select\", fieldname: \"tree_type\", label: __(\"Tree Type\"), options:[\"Customer Group\", \"Customer\",\n\t\t\t\"Item Group\", \"Item\", \"Territory\"],\n\t\t\tfilter: function(val, item, opts, me) {\n\t\t\t\treturn me.apply_zero_filter(val, item, opts, me);\n\t\t\t}},\n\t\t{fieldtype:\"Select\", fieldname: \"based_on\", label: __(\"Based On\"), options:[\"Sales Invoice\",\n\t\t\t\"Sales Order\", \"Delivery Note\"]},\n\t\t{fieldtype:\"Select\", fieldname: \"value_or_qty\", label:  __(\"Value or Qty\"),\n\t\t\toptions:[{label: __(\"Value\"), value: \"Value\"}, {label: __(\"Quantity\"), value: \"Quantity\"}]},\n\t\t{fieldtype:\"Date\", fieldname: \"from_date\", label: __(\"From Date\")},\n\t\t{fieldtype:\"Label\", fieldname: \"to\", label: __(\"To\")},\n\t\t{fieldtype:\"Date\", fieldname: \"to_date\", label: __(\"To Date\")},\n\t\t{fieldtype:\"Select\", fieldname: \"company\", label: __(\"Company\"), link:\"Company\",\n\t\t\tdefault_value: __(\"Select Company...\")},\n\t\t{fieldtype:\"Select\", label: __(\"Range\"), fieldname: \"range\",\n\t\t\toptions:[{label: __(\"Daily\"), value: \"Daily\"}, {label: __(\"Weekly\"), value: \"Weekly\"},\n\t\t\t\t{label: __(\"Monthly\"), value: \"Monthly\"}, {label: __(\"Quarterly\"), value: \"Quarterly\"},\n\t\t\t\t{label: __(\"Yearly\"), value: \"Yearly\"}]}\n\t],\n\tsetup_filters: function() {\n\t\tvar me = this;\n\t\tthis._super();\n\n\t\tthis.trigger_refresh_on_change([\"value_or_qty\", \"tree_type\", \"based_on\", \"company\"]);\n\n\t\tthis.show_zero_check()\n\t\tthis.setup_chart_check();\n\t},\n\tinit_filter_values: function() {\n\t\tthis._super();\n\t\tthis.filter_inputs.range.val('Monthly');\n\t},\n\tprepare_data: function() {\n\t\tvar me = this;\n\t\tif (!this.tl) {\n\t\t\t// add 'Not Set' Customer & Item\n\t\t\t// (Customer / Item are not mandatory!!)\n\t\t\tfrappe.report_dump.data[\"Customer\"].push({\n\t\t\t\tname: \"Not Set\",\n\t\t\t\tparent_customer_group: \"All Customer Groups\",\n\t\t\t\tparent_territory: \"All Territories\",\n\t\t\t\tid: \"Not Set\",\n\t\t\t});\n\n\t\t\tfrappe.report_dump.data[\"Item\"].push({\n\t\t\t\tname: \"Not Set\",\n\t\t\t\tparent_item_group: \"All Item Groups\",\n\t\t\t\tid: \"Not Set\",\n\t\t\t});\n\t\t}\n\n\t\tif (!this.tl || !this.tl[this.based_on]) {\n\t\t\tthis.make_transaction_list(this.based_on, this.based_on + \" Item\");\n\t\t}\n\n\t\tif(!this.data || me.item_type != me.tree_type) {\n\t\t\tif(me.tree_type=='Customer') {\n\t\t\t\tvar items = frappe.report_dump.data[\"Customer\"];\n\t\t\t} if(me.tree_type=='Customer Group') {\n\t\t\t\tvar items = this.prepare_tree(\"Customer\", \"Customer Group\");\n\t\t\t} else if(me.tree_type==\"Item Group\") {\n\t\t\t\tvar items = this.prepare_tree(\"Item\", \"Item Group\");\n\t\t\t} else if(me.tree_type==\"Item\") {\n\t\t\t\tvar items = frappe.report_dump.data[\"Item\"];\n\t\t\t} else if(me.tree_type==\"Territory\") {\n\t\t\t\tvar items = this.prepare_tree(\"Customer\", \"Territory\");\n\t\t\t}\n\n\t\t\tme.item_type = me.tree_type\n\t\t\tme.parent_map = {};\n\t\t\tme.item_by_name = {};\n\t\t\tme.data = [];\n\n\t\t\t$.each(items, function(i, v) {\n\t\t\t\tvar d = copy_dict(v);\n\n\t\t\t\tme.data.push(d);\n\t\t\t\tme.item_by_name[d.name] = d;\n\t\t\t\tif(d[me.tree_grid.parent_field]) {\n\t\t\t\t\tme.parent_map[d.name] = d[me.tree_grid.parent_field];\n\t\t\t\t}\n\t\t\t\tme.reset_item_values(d);\n\t\t\t});\n\n\t\t\tthis.set_indent();\n\n\t\t} else {\n\t\t\t// otherwise, only reset values\n\t\t\t$.each(this.data, function(i, d) {\n\t\t\t\tme.reset_item_values(d);\n\t\t\t});\n\t\t}\n\n\t\tthis.prepare_balances();\n\t\tif(me.tree_grid.show) {\n\t\t\tthis.set_totals(false);\n\t\t\tthis.update_groups();\n\t\t} else {\n\t\t\tthis.set_totals(true);\n\t\t}\n\n\t},\n\tprepare_balances: function() {\n\t\tvar me = this;\n\t\tvar from_date = frappe.datetime.str_to_obj(this.from_date);\n\t\tvar to_date = frappe.datetime.str_to_obj(this.to_date);\n\t\tvar is_val = this.value_or_qty == 'Value';\n\n\t\t$.each(this.tl[this.based_on], function(i, tl) {\n\t\t\tif (me.is_default('company') ? true : tl.company === me.company) {\n\t\t\t\tvar posting_date = frappe.datetime.str_to_obj(tl.posting_date);\n\t\t\t\tif (posting_date >= from_date && posting_date <= to_date) {\n\t\t\t\t\tvar item = me.item_by_name[tl[me.tree_grid.item_key]] ||\n\t\t\t\t\t\tme.item_by_name['Not Set'];\n\t\t\t\t\tif(item){\n\t\t\t\t\t\titem[me.column_map[tl.posting_date].field] += (is_val ? tl.base_net_amount : tl.qty);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t});\n\t},\n\tupdate_groups: function() {\n\t\tvar me = this;\n\n\t\t$.each(this.data, function(i, item) {\n\t\t\tvar parent = me.parent_map[item.name];\n\t\t\twhile(parent) {\n\t\t\t\tvar parent_group = me.item_by_name[parent];\n\n\t\t\t\t$.each(me.columns, function(c, col) {\n\t\t\t\t\tif (col.formatter == me.currency_formatter) {\n\t\t\t\t\t\tparent_group[col.field] =\n\t\t\t\t\t\t\tflt(parent_group[col.field])\n\t\t\t\t\t\t\t+ flt(item[col.field]);\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tparent = me.parent_map[parent];\n\t\t\t}\n\t\t});\n\t},\n\tset_totals: function(sort) {\n\t\tvar me = this;\n\t\tvar checked = false;\n\t\t$.each(this.data, function(i, d) {\n\t\t\td.total = 0.0;\n\t\t\t$.each(me.columns, function(i, col) {\n\t\t\t\tif(col.formatter==me.currency_formatter && !col.hidden && col.field!=\"total\")\n\t\t\t\t\td.total += d[col.field];\n\t\t\t\tif(d.checked) checked = true;\n\t\t\t})\n\t\t});\n\n\t\tif(sort)this.data = this.data.sort(function(a, b) { return a.total < b.total; });\n\n\t\tif(!this.checked) {\n\t\t\tthis.data[0].checked = true;\n\t\t}\n\t}\n});\n","title":"Sales Analytics","restrict_to_domain":null,"modified":"2013-07-11 14:43:59","content":null,"idx":1,"parenttype":null,"page_name":"sales-analytics","docstatus":0,"parentfield":null}]}