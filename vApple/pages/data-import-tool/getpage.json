{"docs":[{"system_page":0,"parent":null,"creation":"2012-06-14 15:07:25","_dynamic_page":1,"module":"Core","standard":"Yes","doctype":"Page","owner":"Administrator","icon":"fa fa-upload","style":".data-import-tool {\n\tpadding: 15px;\n}\n\n.data-import-tool hr {\n\tmargin: 10px -15px;\n}\n","modified_by":"Administrator","name":"data-import-tool","roles":[],"script":"frappe.templates[\"data_import_main\"] = '<div class=\"data-import-tool\"> <div class=\"data-import-selector\"> <h3>{%= __(\"Export Template\") %}</h3> <p class=\"text-muted\">{%= __(\"To import or update records, you must first download the template for importing.\") %}</p> <h6>{%= __(\"Select Type of Document to Download\") %}</h6> <div> <select class=\"form-control doctype\" style=\"width: 200px\" placeholder=\"{%= __(\"Select Type\") %}\"> <option value=\"\"></option> {% for (var i=0, l= frappe.boot.user.can_import.length; i < l; i++) { var doctype = frappe.boot.user.can_import[i]; %} <option value=\"{%= doctype %}\">{%= __(doctype) %}</option> {% } %} </select> <br> </div> </div> <div class=\"export-import-section hide\" style=\"max-width: 700px;\"> <h4>{{ __(\"1. Select Columns\") }}</h4> <p> <a class=\"btn btn-default btn-xs btn-select-all\" style=\"margin-right: 7px;\"> {%= __(\"Select All\") %}</a> <a class=\"btn btn-default btn-xs btn-select-mandatory\" style=\"margin-right: 7px;\"> {%= __(\"Select Mandatory\") %}</a> <a class=\"btn btn-default btn-xs btn-unselect-all\"> {%= __(\"Unselect All\") %}</a> </p> <div class=\"select-columns\"> </div> <br> <h4>{{ __(\"2. Download\") }}</h4> <div class=\"row\"> <div class=\"col-sm-4\"> <p><a class=\"btn btn-primary btn-xs btn-download-template\"> {%= __(\"Download Blank Template\") %}</a></p> </div> <div class=\"col-sm-8\"> <h6 class=\"text-muted\">{%= __(\"Recommended for inserting new records.\") %}</h6> </div> </div> <div class=\"row\"> <div class=\"col-sm-4\"> <p><a class=\"btn btn-primary btn-xs btn-download-data\"> {%= __(\"Download with Data\") %}</a></p> </div> <div class=\"col-sm-8\"> <h6 class=\"text-muted\">{%= __(\"Recommended bulk editing records via import, or understanding the import format.\") %}</h6> </div> </div> <div class=\"row\"> <div class=\"col-sm-4\"> <div class=\"checkbox\" style=\"margin: 5px 0px;\"> <label> <input type=\"checkbox\" class=\"excel-check\" data-fieldname=\"excel_check\" checked> <small>{%= __(\"Download in Excel File Format\") %}</small> </label> </div> </div> </div> </div> <div> <hr style=\"margin-top: 50px;\"> <h3>{%= __(\"Import\") %}</h3> <p class=\"text-muted\">{%= __(\"Update the template and save in downloaded format before attaching.\") %}</p> <div class=\"row\"> <div class=\"col-md-6\"> <br> <h4>{{ __(\"1. Select File\") }}</h4> <div class=\"upload-area\"></div> <br> <h4>{{ __(\"2. Upload\") }}</h4> <div class=\"checkbox\"> <label> <input type=\"checkbox\" name=\"always_insert\"> {%= __(\"Do not update, but insert new records.\") %} </label> </div> <div class=\"checkbox\"> <label> <input type=\"checkbox\" name=\"update_only\"> {%= __(\"Update only, do not insert new records.\") %} </label> </div> <div class=\"checkbox\"> <label> <input type=\"checkbox\" name=\"submit_after_import\"> {%= __(\"Submit after importing.\") %} </label> </div> <div class=\"checkbox\"> <label> <input type=\"checkbox\" name=\"ignore_encoding_errors\"> {%= __(\"Ignore encoding errors.\") %} </label> </div> <div class=\"checkbox\"> <label> <input type=\"checkbox\" name=\"no_email\" checked> {%= __(\"Do not send Emails.\") %} </label> </div> <p> <button class=\"btn btn-sm btn-primary btn-import\">Import</button> </p> </div> <div class=\"import-log hide col-md-6\"> <h3>Import Log</h3> <div class=\"import-log-messages\"></div> </div> </div> </div> </div> ';\nfrappe.templates[\"data_import_tool_columns\"] = '<div style=\"margin: 15px 0px;\"> {% for doctype in doctype_list %} <h5 style=\"margin-top: 25px; margin-bottom: 5px;\">{{ doctype.name }}</h5> <div class=\"row\"> {% for f in doctype.fields %} {% if (frappe.model.no_value_type.indexOf(f.fieldtype)===-1 && !f.hidden) %} {% doctype.reqd||(f.reqd=0);%} <div class=\"col-sm-4\"> <div class=\"checkbox\" style=\"margin: 5px 0px;\"> <label> <input type=\"checkbox\" class=\"select-column-check\" data-fieldname=\"{{ f.fieldname }}\" data-reqd=\"{{ f.reqd }}\" data-doctype=\"{{ doctype.name }}\" checked> <small>{{ __(f.label) }}</small> </label> </div> </div> {% endif %} {% endfor %} </div> {% endfor %} </div> ';\n\n\nfrappe.DataImportTool = Class.extend({\n\tinit: function(parent) {\n\t\tthis.page = frappe.ui.make_app_page({\n\t\t\tparent: parent,\n\t\t\ttitle: __(\"Data Import Tool\"),\n\t\t\tsingle_column: true\n\t\t});\n\t\tthis.page.add_inner_button(__(\"Help\"), function() {\n\t\t\tfrappe.help.show_video(\"6wiriRKPhmg\");\n\t\t});\n\t\tthis.make();\n\t\tthis.make_upload();\n\t},\n\tset_route_options: function() {\n\t\tvar doctype = null;\n\t\tif(frappe.get_route()[1]) {\n\t\t\tdoctype = frappe.get_route()[1];\n\t\t} else if(frappe.route_options && frappe.route_options.doctype) {\n\t\t\tdoctype = frappe.route_options.doctype;\n\t\t}\n\n\t\tif(in_list(frappe.boot.user.can_import, doctype)) {\n\t\t\tthis.select.val(doctype).change();\n\t\t}\n\n\t\tfrappe.route_options = null;\n\t},\n\tmake: function() {\n\t\tvar me = this;\n\t\tfrappe.boot.user.can_import = frappe.boot.user.can_import.sort();\n\n\t\t$(frappe.render_template(\"data_import_main\", this)).appendTo(this.page.main);\n\n\t\tthis.select = this.page.main.find(\"select.doctype\");\n\t\tthis.select_columns = this.page.main.find('.select-columns');\n\t\tthis.select.on(\"change\", function() {\n\t\t\tme.doctype = $(this).val();\n\t\t\tfrappe.model.with_doctype(me.doctype, function() {\n\t\t\t\tme.page.main.find(\".export-import-section\").toggleClass(!!me.doctype);\n\t\t\t\tif(me.doctype) {\n\n\t\t\t\t\t// render select columns\n\t\t\t\t\tvar parent_doctype = frappe.get_doc('DocType', me.doctype);\n\t\t\t\t\tparent_doctype[\"reqd\"] = true;\n\t\t\t\t\tvar doctype_list = [parent_doctype];\n\n\t\t\t\t\tfrappe.meta.get_table_fields(me.doctype).forEach(function(df) {\n\t\t\t\t\t\tvar d = frappe.get_doc('DocType', df.options);\n\t\t\t\t\t\td[\"reqd\"]=df.reqd;\n\t\t\t\t\t\tdoctype_list.push(d);\n\t\t\t\t\t});\n\t\t\t\t\t$(frappe.render_template(\"data_import_tool_columns\", {doctype_list: doctype_list}))\n\t\t\t\t\t\t.appendTo(me.select_columns.empty());\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\n\t\tthis.page.main.find('.btn-select-all').on('click', function() {\n\t\t\tme.select_columns.find('.select-column-check').prop('checked', true);\n\t\t});\n\n\t\tthis.page.main.find('.btn-unselect-all').on('click', function() {\n\t\t\tme.select_columns.find('.select-column-check').prop('checked', false);\n\t\t});\n\n\t\tthis.page.main.find('.btn-select-mandatory').on('click', function() {\n\t\t\tme.select_columns.find('.select-column-check').prop('checked', false);\n\t\t\tme.select_columns.find('.select-column-check[data-reqd=\"1\"]').prop('checked', true);\n\t\t});\n\n\t\tvar get_template_url = '/api/method/frappe.core.page.data_import_tool.exporter.get_template';\n\n\t\tthis.page.main.find(\".btn-download-template\").on('click', function() {\n\t\t\topen_url_post(get_template_url, me.get_export_params(false));\n\t\t});\n\n\t\tthis.page.main.find(\".btn-download-data\").on('click', function() {\n\t\t\topen_url_post(get_template_url, me.get_export_params(true));\n\t\t});\n\n\t},\n\tget_export_params: function(with_data) {\n\t\tvar doctype = this.select.val();\n\t\tvar columns = {};\n\n\t\tthis.select_columns.find('.select-column-check:checked').each(function() {\n\t\t\tvar _doctype = $(this).attr('data-doctype');\n\t\t\tvar _fieldname = $(this).attr('data-fieldname');\n\t\t\tif(!columns[_doctype]) {\n\t\t\t\tcolumns[_doctype] = [];\n\t\t\t}\n\t\t\tcolumns[_doctype].push(_fieldname);\n\t\t});\n\n\t\treturn {\n\t\t\tdoctype: doctype,\n\t\t\tparent_doctype: doctype,\n\t\t\tselect_columns: JSON.stringify(columns),\n\t\t\twith_data: with_data ? 'Yes' : 'No',\n\t\t\tall_doctypes: 'Yes',\n\t\t\tfrom_data_import: 'Yes',\n\t\t\texcel_format: this.page.main.find(\".excel-check\").is(\":checked\") ? 'Yes' : 'No'\n\t\t}\n\t},\n\tmake_upload: function() {\n\t\tvar me = this;\n\t\tfrappe.upload.make({\n\t\t\tparent: this.page.main.find(\".upload-area\"),\n\t\t\tbtn: this.page.main.find(\".btn-import\"),\n\t\t\tget_params: function() {\n\t\t\t\treturn {\n\t\t\t\t\tsubmit_after_import: me.page.main.find('[name=\"submit_after_import\"]').prop(\"checked\"),\n\t\t\t\t\tignore_encoding_errors: me.page.main.find('[name=\"ignore_encoding_errors\"]').prop(\"checked\"),\n\t\t\t\t\toverwrite: !me.page.main.find('[name=\"always_insert\"]').prop(\"checked\"),\n\t\t\t\t\tupdate_only: me.page.main.find('[name=\"update_only\"]').prop(\"checked\"),\n\t\t\t\t\tno_email: me.page.main.find('[name=\"no_email\"]').prop(\"checked\"),\n\t\t\t\t\tfrom_data_import: 'Yes'\n\t\t\t\t}\n\t\t\t},\n\t\t\targs: {\n\t\t\t\tmethod: 'frappe.core.page.data_import_tool.importer.upload',\n\t\t\t},\n\t\t\tallow_multiple: 0,\n\t\t\tonerror: function(r) {\n\t\t\t\tme.onerror(r);\n\t\t\t},\n\t\t\tqueued: function() {\n\t\t\t\t// async, show queued\n\t\t\t\tmsg_dialog.clear();\n\t\t\t\tfrappe.msgprint(__(\"Import Request Queued. This may take a few moments, please be patient.\"));\n\t\t\t},\n\t\t\trunning: function() {\n\t\t\t\t// update async status as running\n\t\t\t\tmsg_dialog.clear();\n\t\t\t\tfrappe.msgprint(__(\"Importing...\"));\n\t\t\t\tme.write_messages([__(\"Importing\")]);\n\t\t\t\tme.has_progress = false;\n\t\t\t},\n\t\t\tprogress: function(data) {\n\t\t\t\t// show callback if async\n\t\t\t\tif(data.progress) {\n\t\t\t\t\tfrappe.hide_msgprint(true);\n\t\t\t\t\tme.has_progress = true;\n\t\t\t\t\tfrappe.show_progress(__(\"Importing\"), data.progress[0],\n\t\t\t\t\t\tdata.progress[1]);\n\t\t\t\t}\n\t\t\t},\n\t\t\tcallback: function(attachment, r) {\n\t\t\t\tif(r.message.error || r.message.messages.length==0) {\n\t\t\t\t\tme.onerror(r);\n\t\t\t\t} else {\n\t\t\t\t\tif(me.has_progress) {\n\t\t\t\t\t\tfrappe.show_progress(__(\"Importing\"), 1, 1);\n\t\t\t\t\t\tsetTimeout(frappe.hide_progress, 1000);\n\t\t\t\t\t}\n\n\t\t\t\t\tr.messages = [\"<h5 style='color:green'>\" + __(\"Import Successful!\") + \"</h5>\"].\n\t\t\t\t\t\tconcat(r.message.messages)\n\n\t\t\t\t\tme.write_messages(r.messages);\n\t\t\t\t}\n\t\t\t},\n\t\t\tis_private: true\n\t\t});\n\n\t\tfrappe.realtime.on(\"data_import_progress\", function(data) {\n\t\t\tif(data.progress) {\n\t\t\t\tfrappe.hide_msgprint(true);\n\t\t\t\tme.has_progress = true;\n\t\t\t\tfrappe.show_progress(__(\"Importing\"), data.progress[0],\n\t\t\t\t\tdata.progress[1]);\n\t\t\t}\n\t\t})\n\n\t},\n\twrite_messages: function(data) {\n\t\tthis.page.main.find(\".import-log\").removeClass(\"hide\");\n\t\tvar parent = this.page.main.find(\".import-log-messages\").empty();\n\n\t\t// TODO render using template!\n\t\tfor (var i=0, l=data.length; i<l; i++) {\n\t\t\tvar v = data[i];\n\t\t\tvar $p = $('<p></p>').html(frappe.markdown(v)).appendTo(parent);\n\t\t\tif(v.substr(0,5)=='Error') {\n\t\t\t\t$p.css('color', 'red');\n\t\t\t} else if(v.substr(0,8)=='Inserted') {\n\t\t\t\t$p.css('color', 'green');\n\t\t\t} else if(v.substr(0,7)=='Updated') {\n\t\t\t\t$p.css('color', 'green');\n\t\t\t} else if(v.substr(0,5)=='Valid') {\n\t\t\t\t$p.css('color', '#777');\n\t\t\t} else if(v.substr(0,7)=='Ignored') {\n\t\t\t\t$p.css('color', '#777');\n\t\t\t}\n\t\t}\n\t},\n\tonerror: function(r) {\n\t\tif(r.message) {\n\t\t\t// bad design: moves r.messages to r.message.messages\n\t\t\tr.messages = $.map(r.message.messages, function(v) {\n\t\t\t\tvar msg = v.replace(\"Inserted\", \"Valid\")\n\t\t\t\t\t.replace(\"Updated\", \"Valid\").split(\"<\");\n\t\t\t\tif (msg.length > 1) {\n\t\t\t\t\tv = msg[0] + (msg[1].split(\">\").slice(-1)[0]);\n\t\t\t\t} else {\n\t\t\t\t\tv = msg[0];\n\t\t\t\t}\n\t\t\t\treturn v;\n\t\t\t});\n\n\t\t\tr.messages = [\"<h4 style='color:red'>\" + __(\"Import Failed\") + \"</h4>\"]\n\t\t\t\t.concat(r.messages);\n\n\t\t\tr.messages.push(\"Please correct the format of the file and import again.\");\n\n\t\t\tfrappe.show_progress(__(\"Importing\"), 1, 1);\n\n\t\t\tthis.write_messages(r.messages);\n\t\t}\n\t}\n});\n\nfrappe.pages['data-import-tool'].on_page_load = function(wrapper) {\n\tfrappe.data_import_tool = new frappe.DataImportTool(wrapper);\n}\n\nfrappe.pages['data-import-tool'].on_page_show = function(wrapper) {\n\tfrappe.data_import_tool && frappe.data_import_tool.set_route_options();\n}\n","title":"Data Import Tool","restrict_to_domain":null,"modified":"2016-05-11 03:37:53.385693","content":null,"idx":1,"parenttype":null,"page_name":"data-import-tool","docstatus":0,"parentfield":null}]}